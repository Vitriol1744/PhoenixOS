/*
 * Created by vitriol1744 on 10.06.2023.
 * Copyright (c) 2022-2023, Szymon Zemke <Vitriol1744@gmail.com>
 *
 * SPDX-License-Identifier: GPL-3
 */
#pragma once

#include <cstdint>
#include <cstring>
#include_next <functional>

constexpr inline size_t _hash(const void* ptr, uint64_t len,
                              uint64_t seed = 0xc70f6907ul)
{
    const uint64_t  m    = 0xc6a4a7935bd1e995;
    const int       r    = 47;

    uint64_t        h    = seed ^ (len * m);

    const uint64_t* data = static_cast<const uint64_t*>(ptr);
    const uint64_t* end  = data + (len / 8);

    while (data != end)
    {
        uint64_t k = 0;
        memcpy(&k, data++, sizeof(uint64_t));

        k *= m;
        k ^= k >> r;
        k *= m;

        h ^= k;
        h *= m;
    }

    auto data2 = static_cast<const uint8_t*>(static_cast<const void*>(data));

    switch (len & 7)
    {
        case 7: h ^= static_cast<uint64_t>(data2[6]) << 48;
        case 6: h ^= static_cast<uint64_t>(data2[5]) << 40;
        case 5: h ^= static_cast<uint64_t>(data2[4]) << 32;
        case 4: h ^= static_cast<uint64_t>(data2[3]) << 24;
        case 3: h ^= static_cast<uint64_t>(data2[2]) << 16;
        case 2: h ^= static_cast<uint64_t>(data2[1]) << 8;
        case 1: h ^= static_cast<uint64_t>(data2[0]); h *= m;
    };

    h ^= h >> r;
    h *= m;
    h ^= h >> r;

    return h;
}

constexpr inline size_t _hash(const auto& val)
{
    return _hash(&val, sizeof(val));
}

namespace std
{
    template <typename>
    class function;

    template <typename R, typename... Args>
    class function<R(Args...)>
    {
      public:
        using result_type   = R;

        function() noexcept = default;
        function(std::nullptr_t) noexcept {}
        function(const function& other)     = default;
        function(function&& other) noexcept = default;
        template <typename F>
        function(F&& f)
            : _callable(new callableFunc<F>(f))
        {
        }

        ~function()
        {
            if (!_callable) return;
            delete _callable;
        }

        function& operator=(const function& other) = default;
        function& operator=(function&& other)
        {
            other._callable = _callable;
            _callable       = nullptr;
        }
        function& operator=(std::nullptr_t) noexcept { _callable = nullptr; }
        template <typename F>
        function& operator=(F&& f)
        {
            if (_callable) delete _callable;
            _callable = new callableFunc<F>(f);
            return *this;
        }
        template <typename F>
        function& operator=(std::reference_wrapper<F> f) noexcept
        {
            if (_callable) delete _callable;
            _callable = new callableFunc<F>(f);
            return *this;
        }

        void swap(function& other) noexcept
        {
            callable* temp  = other._callable;
            other._callable = _callable;
            _callable       = temp;
        }

        explicit operator bool() const { return _callable != nullptr; }

        R operator()(Args... args) const
        {
            if (!_callable) return R();
            return _callable->invoke(args...);
        }

        //        const std::type_info& target_type() const noexcept;

        template <typename T>
        T* target() noexcept
        {
            return reinterpret_cast<T*>(_callable);
        }
        template <typename T>
        const T* target() const noexcept
        {
            return reinterpret_cast<T*>(_callable);
        }

      private:
        class callable
        {
          public:
            virtual ~callable()       = default;
            virtual R invoke(Args...) = 0;
        };

        template <typename F>
        class [[gnu::aligned(16)]] callableFunc : public callable
        {
          public:
            callableFunc(const F& f)
                : _function(f)
            {
            }
            ~callableFunc() override = default;

            R invoke(Args... args) override { return _function(args...); }

          private:
            F _function;
        };

        callable* _callable;
    };
} // namespace std