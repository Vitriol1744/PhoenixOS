/*
 * Created by vitriol1744 on 06.01.2023.
 * Copyright (c) 2022-2023, Szymon Zemke <Vitriol1744@gmail.com>
 *
 * SPDX-License-Identifier: GPL-3
 */
#pragma once

#include "details/allocator"
#include <memory>
#include <limits>

namespace std
{
    template <typename T, typename Allocator = std::allocator<T>>
    class vector
    {
      public:
        using value_type      = T;
        using allocator_type  = Allocator;
        using size_type       = std::size_t;
        using difference_type = std::ptrdiff_t;
        using reference       = value_type&;
        using const_reference = const value_type&;
        using pointer         = typename std::allocator_traits<Allocator>::pointer;
        using const_pointer   = typename std::allocator_traits<Allocator>::const_pointer;
//         using iterator = ;
//         using const_iterator = ;
//                using reverse_iterator = std::reverse_iterator<iterator>
//                using const_reverse_iterator =
//                std::reverse_iterator<const_iterator>

        vector() = default;

        constexpr reference at(size_type pos)
        {
            // We don't have exceptions, so we have to improvise xd
            if (pos >= _size) *(char*)0 = 5;

            return _data[pos];
        }
        constexpr const_reference at(size_type pos) const
        {
            if (pos >= _size) *(char*)0 = 5;

            return _data[pos];
        }
        constexpr reference operator[](size_type pos) { return at(pos); }
        constexpr const_reference operator[]( size_type pos ) const { return at(pos); }
        constexpr reference front() { return _data[0]; }
        constexpr const_reference front() const { return _data[0]; }
        constexpr reference back() { return _data[_size - 1]; }
        constexpr const_reference back() const { return _data[_size - 1]; }
        constexpr T* data() noexcept { return _data; }
        constexpr const T* data() const noexcept { return _data; }

        [[nodiscard]] constexpr bool empty() const noexcept { return _size == 0; }
        constexpr size_type size() const noexcept { return _size; }
        constexpr size_type max_size() const noexcept
        {
            return std::numeric_limits<difference_type>::max();
        }
        constexpr void reserve(size_type new_cap)
        {
            pointer new_data = reinterpret_cast<pointer>(::operator new(new_cap * sizeof(value_type)));

            if (new_cap < _size) _size = new_cap;
            for (size_type i = 0; i < _size; i++) new(&new_data[i]) value_type(std::move(_data[i]));

            for (size_type i = 0; i < _size; i++) _data[i].~value_type();

            ::operator delete(_data, _capacity * sizeof(value_type));
            _data     = new_data;
            _capacity = new_cap;
        }
        constexpr size_type capacity() const noexcept { return _capacity; }
        constexpr void shrink_to_fit()
        {
            if (_size <= _capacity) return;
            pointer new_data = reinterpret_cast<pointer>(::operator new(size() * sizeof(value_type)));

            for (size_type i = 0; i < _size; i++)
            {
                new(&new_data[i]) value_type(std::move(_data[i]));
                _data[i].~value_type();
            }

            ::operator delete(_data, _capacity * sizeof(value_type));
            _data = new_data;
            _capacity = _size;
        }

        constexpr void clear() noexcept
        {
            for (size_type i = 0; i < _size; i++) _data[i].~value_type();
            _size = 0;
        }
        void push_back(T& value)
        {
            if (_size >= _capacity)
                reserve(_capacity ? _capacity * 2 : 1);

            _data[_size] = value;
            ++_size;
        }
        void push_back(T&& value)
        {
            if (_size >= _capacity) reserve(_capacity ? _capacity * 2 : 1);

            _data[_size] = std::move(value);
            ++_size;
        }
        constexpr void pop_back()
        {
            if (_size == 0) return;

            _data[_size - 1].~value_type();
            _size--;
        }
        constexpr void resize(size_type count)
        {
            reserve(count);
            for (size_type i = _size; i < _capacity; i++)
                new(&_data[i]) value_type();
            _size = count;
        }
        constexpr void resize(size_type count, const value_type& value)
        {
            reserve(count);
            for (size_type i = _size; i < _capacity; i++)
                new(&_data[i]) value_type(value);
            _size = count;
        }

      private:
        pointer _data;
        size_type _size;
        size_type _capacity;
    };
} // namespace std