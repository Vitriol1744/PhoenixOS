/*
 * Created by vitriol1744 on 06.01.2023.
 * Copyright (c) 2022-2023, Szymon Zemke <Vitriol1744@gmail.com>
 *
 * SPDX-License-Identifier: GPL-3
 */
#pragma once

#include <cstddef>

namespace std
{
    template <typename T>
    struct allocator
    {
      public:
        using value_type                             = T;
        using size_type                              = std::size_t;
        using difference_type                        = std::ptrdiff_t;
        using propagate_on_container_move_assignment = std::true_type;

        constexpr allocator() noexcept {}
        template <typename U>
        constexpr allocator(const allocator& other) noexcept
        {
        }
        template <typename U>
        constexpr allocator(const allocator<U>& other) noexcept
        {
        }
        constexpr ~allocator() {}

        [[nodiscard]] constexpr T* allocate(std::size_t n)
        {
            auto ret = reinterpret_cast<T*>(::operator new(sizeof(T) * n));
            // TODO:            if (!ret) throw std::bad_alloc();

            return ret;
        }
    };

//    template <typename Alloc>
//    struct allocator_traits
//    {
//    };
} // namespace std
