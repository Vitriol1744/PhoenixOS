/*
 * Created by vitriol1744 on 06.01.2023.
 * Copyright (c) 2022-2023, Szymon Zemke <Vitriol1744@gmail.com>
 *
 * SPDX-License-Identifier: GPL-3
 */
#pragma once

#include <compare>
#include <cstdint>

#include <bits/char_traits.h>

/*
namespace std
{
    template <typename CharT>
    class char_traits
    {
      public:
        using char_type            = CharT;
        using int_type             = int32_t;
        using comparision_category = std::strong_ordering;

        static constexpr void assign(char_type& r, const char_type& a) noexcept
        {
            r = a;
        }
        static constexpr char_type* assign(char_type* p, std::size_t count,
                                           char_type a)
        {
            while (count > 0)
            {
                *p++ = a;
                --count;
            }
        }
        static constexpr bool eq(char_type a, char_type b) noexcept
        {
            return a == b;
        }
        static constexpr bool lt(char_type a, char_type b) noexcept
        {
            return a < b;
        }
        static constexpr char_type* move(char_type* dest, const char_type* src,
                                         std::size_t count)
        {
            char_type* ret = dest;
            if (dest < src)
                while (count-- != 0) assign(*dest++, *src++);
            else if (src < dest)
            {
                dest += count;
                src += count;
                while (count-- != 0) assign(*--dest, *--src);
            }

            return ret;
        }
        static constexpr char_type* copy(char_type* dest, const char_type* src,
                                         std::size_t count)
        {
            assert(src < dest || src >= dest + count);
            auto ret = dest;
            while (count-- != 0) assign(*dest++, *src++);
            return ret;
        }
        static constexpr int_type
        compare(const char_type* s1, const char_type* s2, std::size_t count)
        {
            while (count-- != 0)
            {
                if (lt(*s1, *s2)) return -1;
                if (lt(*s2++, *s1++)) return 1;
            }
            return 0;
        }
        static constexpr std::size_t length(const char_type* s)
        {
            std::size_t len = 0;
            while (eq(*s++, char_type(0)) == false) ++len;

            return len;
        }
        static constexpr const char_type*
        find(const char_type* p, std::size_t count, const char_type& ch)
        {
            while (count > 0)
            {
                if (*p++ == ch) return p;
                --count;
            }

            return nullptr;
        }
        static constexpr char_type to_char_type(int_type c) noexcept
        {
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c) noexcept
        {
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept
        {
            return c1 == c2;
        }
        static constexpr int_type eof() noexcept { return -1; }
        static constexpr int_type not_eof(int_type e) noexcept
        {
            return eq_int_type(e, eof()) ? ~eof() : e;
        }
    };

    // TODO: Specialization for std::char_traits<char>
    template <>
    class char_traits<char>
    {
      public:
        using char_type = char;
        using int_type = int;

        static constexpr void assign(char_type& r, const char_type& a) noexcept
        {
            r = a;
        }
        static constexpr char_type* assign(char_type* p, std::size_t count,
                                           char_type a)
        {
            while (count > 0)
            {
                *p++ = a;
                --count;
            }

            return p;
        }
        static constexpr bool eq(char_type a, char_type b) noexcept
        {
            return a == b;
        }
        static constexpr bool lt(char_type a, char_type b) noexcept
        {
            return a < b;
        }
        static constexpr char_type* move(char_type* dest, const char_type* src,
                                         std::size_t count)
        {
            char_type* ret = dest;
            if (dest < src)
                while (count-- != 0) assign(*dest++, *src++);
            else if (src < dest)
            {
                dest += count;
                src += count;
                while (count-- != 0) assign(*--dest, *--src);
            }

            return ret;
        }
        static constexpr char_type* copy(char_type* dest, const char_type* src,
                                         std::size_t count)
        {
            //TODO: assert(src < dest || src >= dest + count);
            auto ret = dest;
            while (count-- != 0) assign(*dest++, *src++);
            return ret;
        }
        static constexpr int_type
        compare(const char_type* s1, const char_type* s2, std::size_t count)
        {
            while (count-- != 0)
            {
                if (lt(*s1, *s2)) return -1;
                if (lt(*s2++, *s1++)) return 1;
            }
            return 0;
        }
        static constexpr std::size_t length(const char_type* s)
        {
            std::size_t len = 0;
            while (eq(*s++, char_type(0)) == false) ++len;

            return len;
        }
        static constexpr const char_type*
        find(const char_type* p, std::size_t count, const char_type& ch)
        {
            while (count > 0)
            {
                if (*p++ == ch) return p;
                --count;
            }

            return nullptr;
        }
        static constexpr char_type to_char_type(int_type c) noexcept
        {
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c) noexcept
        {
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept
        {
            return c1 == c2;
        }
        static constexpr int_type eof() noexcept { return -1; }
        static constexpr int_type not_eof(int_type e) noexcept
        {
            return eq_int_type(e, eof()) ? ~eof() : e;
        }
    };
} // namespace std*/
